// Code generated by mockery. DO NOT EDIT.

package execution_loggers

import mock "github.com/stretchr/testify/mock"

// OutputFileReaderWriterMock is an autogenerated mock type for the OutputFileReaderWriter type
type OutputFileReaderWriterMock struct {
	mock.Mock
}

type OutputFileReaderWriterMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OutputFileReaderWriterMock) EXPECT() *OutputFileReaderWriterMock_Expecter {
	return &OutputFileReaderWriterMock_Expecter{mock: &_m.Mock}
}

// Read provides a mock function with given fields: filename
func (_m *OutputFileReaderWriterMock) Read(filename string) (ExecutionLogs, error) {
	ret := _m.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 ExecutionLogs
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (ExecutionLogs, error)); ok {
		return rf(filename)
	}
	if rf, ok := ret.Get(0).(func(string) ExecutionLogs); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Get(0).(ExecutionLogs)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OutputFileReaderWriterMock_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type OutputFileReaderWriterMock_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - filename string
func (_e *OutputFileReaderWriterMock_Expecter) Read(filename interface{}) *OutputFileReaderWriterMock_Read_Call {
	return &OutputFileReaderWriterMock_Read_Call{Call: _e.mock.On("Read", filename)}
}

func (_c *OutputFileReaderWriterMock_Read_Call) Run(run func(filename string)) *OutputFileReaderWriterMock_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OutputFileReaderWriterMock_Read_Call) Return(_a0 ExecutionLogs, _a1 error) *OutputFileReaderWriterMock_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OutputFileReaderWriterMock_Read_Call) RunAndReturn(run func(string) (ExecutionLogs, error)) *OutputFileReaderWriterMock_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: filename, logs
func (_m *OutputFileReaderWriterMock) Write(filename string, logs ExecutionLogs) error {
	ret := _m.Called(filename, logs)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ExecutionLogs) error); ok {
		r0 = rf(filename, logs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OutputFileReaderWriterMock_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type OutputFileReaderWriterMock_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - filename string
//   - logs ExecutionLogs
func (_e *OutputFileReaderWriterMock_Expecter) Write(filename interface{}, logs interface{}) *OutputFileReaderWriterMock_Write_Call {
	return &OutputFileReaderWriterMock_Write_Call{Call: _e.mock.On("Write", filename, logs)}
}

func (_c *OutputFileReaderWriterMock_Write_Call) Run(run func(filename string, logs ExecutionLogs)) *OutputFileReaderWriterMock_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(ExecutionLogs))
	})
	return _c
}

func (_c *OutputFileReaderWriterMock_Write_Call) Return(_a0 error) *OutputFileReaderWriterMock_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OutputFileReaderWriterMock_Write_Call) RunAndReturn(run func(string, ExecutionLogs) error) *OutputFileReaderWriterMock_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewOutputFileReaderWriterMock creates a new instance of OutputFileReaderWriterMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOutputFileReaderWriterMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OutputFileReaderWriterMock {
	mock := &OutputFileReaderWriterMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
