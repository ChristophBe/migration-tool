// Code generated by mockery. DO NOT EDIT.

package actions

import mock "github.com/stretchr/testify/mock"

// MigrationDefinitionReaderWriterMock is an autogenerated mock type for the MigrationDefinitionReaderWriter type
type MigrationDefinitionReaderWriterMock struct {
	mock.Mock
}

type MigrationDefinitionReaderWriterMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MigrationDefinitionReaderWriterMock) EXPECT() *MigrationDefinitionReaderWriterMock_Expecter {
	return &MigrationDefinitionReaderWriterMock_Expecter{mock: &_m.Mock}
}

// Read provides a mock function with given fields: fileName
func (_m *MigrationDefinitionReaderWriterMock) Read(fileName string) (MigrationDefinition, error) {
	ret := _m.Called(fileName)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 MigrationDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (MigrationDefinition, error)); ok {
		return rf(fileName)
	}
	if rf, ok := ret.Get(0).(func(string) MigrationDefinition); ok {
		r0 = rf(fileName)
	} else {
		r0 = ret.Get(0).(MigrationDefinition)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MigrationDefinitionReaderWriterMock_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MigrationDefinitionReaderWriterMock_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - fileName string
func (_e *MigrationDefinitionReaderWriterMock_Expecter) Read(fileName interface{}) *MigrationDefinitionReaderWriterMock_Read_Call {
	return &MigrationDefinitionReaderWriterMock_Read_Call{Call: _e.mock.On("Read", fileName)}
}

func (_c *MigrationDefinitionReaderWriterMock_Read_Call) Run(run func(fileName string)) *MigrationDefinitionReaderWriterMock_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MigrationDefinitionReaderWriterMock_Read_Call) Return(_a0 MigrationDefinition, _a1 error) *MigrationDefinitionReaderWriterMock_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MigrationDefinitionReaderWriterMock_Read_Call) RunAndReturn(run func(string) (MigrationDefinition, error)) *MigrationDefinitionReaderWriterMock_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: fileName, vales
func (_m *MigrationDefinitionReaderWriterMock) Write(fileName string, vales MigrationDefinition) error {
	ret := _m.Called(fileName, vales)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, MigrationDefinition) error); ok {
		r0 = rf(fileName, vales)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MigrationDefinitionReaderWriterMock_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MigrationDefinitionReaderWriterMock_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - fileName string
//   - vales MigrationDefinition
func (_e *MigrationDefinitionReaderWriterMock_Expecter) Write(fileName interface{}, vales interface{}) *MigrationDefinitionReaderWriterMock_Write_Call {
	return &MigrationDefinitionReaderWriterMock_Write_Call{Call: _e.mock.On("Write", fileName, vales)}
}

func (_c *MigrationDefinitionReaderWriterMock_Write_Call) Run(run func(fileName string, vales MigrationDefinition)) *MigrationDefinitionReaderWriterMock_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(MigrationDefinition))
	})
	return _c
}

func (_c *MigrationDefinitionReaderWriterMock_Write_Call) Return(_a0 error) *MigrationDefinitionReaderWriterMock_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MigrationDefinitionReaderWriterMock_Write_Call) RunAndReturn(run func(string, MigrationDefinition) error) *MigrationDefinitionReaderWriterMock_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewMigrationDefinitionReaderWriterMock creates a new instance of MigrationDefinitionReaderWriterMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMigrationDefinitionReaderWriterMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MigrationDefinitionReaderWriterMock {
	mock := &MigrationDefinitionReaderWriterMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
