// Code generated by mockery. DO NOT EDIT.

package cmd

import mock "github.com/stretchr/testify/mock"

// ActionsMock is an autogenerated mock type for the Actions type
type ActionsMock struct {
	mock.Mock
}

type ActionsMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ActionsMock) EXPECT() *ActionsMock_Expecter {
	return &ActionsMock_Expecter{mock: &_m.Mock}
}

// RecalculateHashes provides a mock function with given fields: folder
func (_m *ActionsMock) RecalculateHashes(folder string) error {
	ret := _m.Called(folder)

	if len(ret) == 0 {
		panic("no return value specified for RecalculateHashes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(folder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ActionsMock_RecalculateHashes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecalculateHashes'
type ActionsMock_RecalculateHashes_Call struct {
	*mock.Call
}

// RecalculateHashes is a helper method to define mock.On call
//   - folder string
func (_e *ActionsMock_Expecter) RecalculateHashes(folder interface{}) *ActionsMock_RecalculateHashes_Call {
	return &ActionsMock_RecalculateHashes_Call{Call: _e.mock.On("RecalculateHashes", folder)}
}

func (_c *ActionsMock_RecalculateHashes_Call) Run(run func(folder string)) *ActionsMock_RecalculateHashes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ActionsMock_RecalculateHashes_Call) Return(_a0 error) *ActionsMock_RecalculateHashes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ActionsMock_RecalculateHashes_Call) RunAndReturn(run func(string) error) *ActionsMock_RecalculateHashes_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: folder
func (_m *ActionsMock) Run(folder string) error {
	ret := _m.Called(folder)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(folder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ActionsMock_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type ActionsMock_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - folder string
func (_e *ActionsMock_Expecter) Run(folder interface{}) *ActionsMock_Run_Call {
	return &ActionsMock_Run_Call{Call: _e.mock.On("Run", folder)}
}

func (_c *ActionsMock_Run_Call) Run(run func(folder string)) *ActionsMock_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ActionsMock_Run_Call) Return(_a0 error) *ActionsMock_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ActionsMock_Run_Call) RunAndReturn(run func(string) error) *ActionsMock_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: folder
func (_m *ActionsMock) Verify(folder string) (bool, error) {
	ret := _m.Called(folder)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(folder)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(folder)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(folder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActionsMock_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type ActionsMock_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - folder string
func (_e *ActionsMock_Expecter) Verify(folder interface{}) *ActionsMock_Verify_Call {
	return &ActionsMock_Verify_Call{Call: _e.mock.On("Verify", folder)}
}

func (_c *ActionsMock_Verify_Call) Run(run func(folder string)) *ActionsMock_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ActionsMock_Verify_Call) Return(_a0 bool, _a1 error) *ActionsMock_Verify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ActionsMock_Verify_Call) RunAndReturn(run func(string) (bool, error)) *ActionsMock_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewActionsMock creates a new instance of ActionsMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewActionsMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ActionsMock {
	mock := &ActionsMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
